name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'The environment to deploy to (Production or Preview)'
      is_production:
        required: true
        type: boolean
        description: 'Whether this is a production deployment'
    secrets:
      VERCEL_TOKEN:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        working-directory: scripts
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Set GitHub deployment environment name
        id: set-env
        run: |
          if [ "${{ inputs.environment }}" = "preview" ]; then
            echo "GITHUB_DEPLOYMENT_ENV=Preview" >> $GITHUB_ENV
          else
            echo "GITHUB_DEPLOYMENT_ENV=Production" >> $GITHUB_ENV
          fi

      - name: Link Vercel Project
        working-directory: ide
        run: vercel link --yes --project=themed-ide --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull Vercel Environment Information
        working-directory: ide
        run: vercel pull --yes --environment=${{ inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: '${{ env.GITHUB_DEPLOYMENT_ENV }}',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Update GitHub Deployment Status (In Progress)
        run: |
          python scripts/github_deployment.py \
            "${{ github.token }}" \
            "${{ github.repository }}" \
            "${{ steps.deployment.outputs.result }}" \
            "in_progress" \
            "${{ env.GITHUB_DEPLOYMENT_ENV }}"

      - name: Build Project Artifacts
        working-directory: ide
        run: vercel build ${{ inputs.is_production && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy Project Artifacts to Vercel
        id: vercel-deploy
        working-directory: ide
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt ${{ inputs.is_production && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }} | grep -o 'https://[^ ]*\.vercel\.app')
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV

      - name: Update GitHub Deployment Status (Success)
        if: success()
        run: |
          python scripts/github_deployment.py \
            "${{ github.token }}" \
            "${{ github.repository }}" \
            "${{ steps.deployment.outputs.result }}" \
            "success" \
            "${{ env.GITHUB_DEPLOYMENT_ENV }}" \
            "${{ env.DEPLOY_URL }}"

      - name: Update GitHub Deployment Status (Failure)
        if: failure()
        run: |
          python scripts/github_deployment.py \
            "${{ github.token }}" \
            "${{ github.repository }}" \
            "${{ steps.deployment.outputs.result }}" \
            "failure" \
            "${{ env.GITHUB_DEPLOYMENT_ENV }}" 